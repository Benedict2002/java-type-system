Type Annotations
release of Java 8, two new values for ElementType were added—
TYPE_PARAMETER and TYPE_USE. These new values allow the use of annotations in
places where they were previously not legal, such as at any site where a type is used.
This enables the developer to write code such as:
@NotNull String safeString = getMyString();


Nested Types
 These nested types, commonly known as “inner
classes,” are a powerful feature of the Java language.

Nested types are used for two separate purposes, both related to encapsulation:
• A type may be nested because it needs especially intimate access to the internals
of another type—by being a member type, it has access in the same way that
member variables and methods do, and can bend the rules of encapsulation.
• A type may be only required for a very specific reason, and in a very small sec‐
tion of code. It should be tightly localized, as it is really part of the implementa‐
tion detail and should be encapsulated away from the rest of the system.

Static member types
A static member type is any type defined as a static member of another type.
Nested interfaces, enums, and annotations are always static (even if you don’t
use the keyword).
Nonstatic member classes
A “nonstatic member type” is simply a member type that is not declared
static. Only classes can be nonstatic member types.
Local classes
A local class is a class that is defined and only visible within a block of Java
code. Interfaces, enums, and annotations may not be defined locally.
Anonymous classes
An anonymous class is a kind of local class that has no meaningful name in the
Java language. Interfaces, enums, and annotations cannot be defined
anonymously.


The term “nested types,” while a correct and precise usage, is not widely used by
developers. Instead, most Java prorammers user the much vaguer term “inner class.”
Depending on the situation, this can refer to a nonstatic member class, local class,
or anonymous class, but not a static member type, with no real way to distinguish
between them.


Static Member Types
A static member type is much like a regular top-level type. For convenience, how‐
ever, it is nested within the namespace of another type. Static member types have
the following basic properties:

• A static member type is like the other static members of a class: static fields and
static methods.
• A static member type is not associated with any instance of the containing class
(i.e., there is no this object).
• A static member type can access (only) the static members of the class that
contains it.
• A static member type has access to all the static members (including any
other static member types) of its containing type.
• Nested interfaces, enums, and annotations are implicitly static, whether or not
the static keyword appears.
• Any type nested within an interface or annotation is also implicitly static.
• Static member types may be defined within top-level types or nested to any
depth within other static member types.
• A static member type may not be defined within any other kind of nested type.


Example . Defining and using a static member interface
// A class that implements a stack as a linked list
public class LinkedStack {
 // This static member interface defines how objects are linked
 // The static keyword is optional: all nested interfaces are static
 static interface Linkable {
 public Linkable getNext();
 public void setNext(Linkable node);
 }
 // The head of the list is a Linkable object
 Linkable head;
 // Method bodies omitted
 public void push(Linkable node) { ... }
 public Object pop() { ... }
}
// This class implements the static member interface
class LinkableInteger implements LinkedStack.Linkable {
 // Here's the node's data and constructor
 int i;
 public LinkableInteger(int i) { this.i = i; }
 // Here are the data and methods required to implement the interface
 LinkedStack.Linkable next;
 public LinkedStack.Linkable getNext() { return next; }
 public void setNext(LinkedStack.Linkable node) { next = node; }
}



Features of static member types
A static member type has access to all static members of its containing type, includ‐
ing private members. The reverse is true as well: the methods of the containing
type have access to all members of a static member type, including the private
members. A static member type even has access to all the members of any other
static member types, including the private members of those types. A static mem‐
ber type can use any other static member without qualifying its name with the name
of the containing type.

NB: A static member type cannot have the same name as any of its
enclosing classes. In addition, static member types can be
defined only within top-level types and other static member
types. This is actually part of a larger prohibition against
static members of any sort within member, local, and anony‐
mous classes.

Top-level types can be declared as either public or package-private (if they’re
declared without the public keyword). But declaring top-level types as private and
protected wouldn’t make a great deal of sense—protected would just mean the
same as package-private and a private top-level class would be unable to be
accessed by any other type.

Static member types, on the other hand, are members and so can use any access
control modifiers that other members of the containing type can. These modifiers
have the same meanings for static member types as they do for other members of a
type. Recall that all members of interfaces (and annotations) are implicitly public,
so static member types nested within interfaces or annotation types cannot be pro
tected or private.

For example, in Example , the Linkable interface is declared public, so it can be
implemented by any class that is interested in being stored on a LinkedStack

In code outside the containing class, a static member type is named by combining
the name of the outer type with the name of the inner type (e.g., LinkedStack.Link
able).


Nonstatic Member Classes

A nonstatic member class is a class that is declared as a member of a containing class
or enumerated type without the static keyword:

• If a static member type is analogous to a class field or class method, a nonstatic
member class is analogous to an instance field or instance method.
• Only classes can be nonstatic member types.
• An instance of a nonstatic member class is always associated with an instance
of the enclosing type.
• The code of a nonstatic member class has access to all the fields and methods
(both static and non-static) of its enclosing type.
• Several features of Java syntax exist specifically to work with the enclosing
instance of a nonstatic member class.


.
Example below shows how a member class can be defined and used. This example
extends the previous LinkedStack example to allow enumeration of the elements on
the stack by defining an iterator() method that returns an implementation of the
java.util.Iterator interface. The implementation of this interface is defined as a
member class.

Example . An iterator implemented as a member class
import java.util.Iterator;
public class LinkedStack {
 // Our static member interface
 public interface Linkable {
 public Linkable getNext();
 public void setNext(Linkable node);
 }
 // The head of the list
 private Linkable head;
 // Method bodies omitted here
public void push(Linkable node) { ... }
 public Linkable pop() { ... }
 // This method returns an Iterator object for this LinkedStack
 public Iterator<Linkable> iterator() { return new LinkedIterator(); }
 // Here is the implementation of the Iterator interface,
 // defined as a nonstatic member class.
 protected class LinkedIterator implements Iterator<Linkable> {
 Linkable current;
 // The constructor uses a private field of the containing class
 public LinkedIterator() { current = head; }
 // The following 3 methods are defined by the Iterator interface
 public boolean hasNext() { return current != null; }
 public Linkable next() {
 if (current == null)
 throw new java.util.NoSuchElementException();
 Linkable value = current;
 current = current.getNext();
 return value;
 }
 public void remove() { throw new UnsupportedOperationException(); }
 }
}
Notice how the LinkedIterator class is nested within the LinkedStack class.
Because LinkedIterator is a helper class used only within LinkedStack, having it
defined so close to where it is used by the containing class makes for a clean design,
just as we discussed when we introduced nested types.

Features of member classes
Like instance fields and instance methods, every instance of a nonstatic member
class is associated with an instance of the class in which it is defined. This means
that the code of a member class has access to all the instance fields and instance
methods (as well as the static members) of the containing instance, including any
that are declared private.

This crucial feature was already illustrated in Example . Here is the Linked
Stack.LinkedIterator() constructor again:
public LinkedIterator() { current = head; }

This single line of code sets the current field of the inner class to the value of the
head field of the containing class. The code works as shown, even though head is
declared as a private field in the containing class.

A nonstatic member class, like any member of a class, can be assigned one of the
standard access control modifiers. In Example , the LinkedIterator class is
declared protected, so it is inaccessible to code (in a different package) that uses
the LinkedStack class but is accessible to any class that subclasses LinkedStack.

Restrictions on member classes
Member classes have two important restrictions:
• A nonstatic member class cannot have the same name as any containing class
or package. This is an important rule, one that is not shared by fields and meth‐
ods.
• Nonstatic member classes cannot contain any static fields, methods, or types,
except for constant fields declared both static and final.

NB: static members are top-level constructs not associated with
any particular object while every nonstatic member class is
associated with an instance of its enclosing class. Defining a
static top-level member within a member class that is not at
the top level would cause confusion, so it is not allowed.

The most important feature of a member class is that it can access the instance
fields and methods in its containing object. We saw this in the LinkedStack.Linked
Iterator() constructor of Example 4-2:
public LinkedIterator() { current = head; }

In this example, head is a field of the enclosing LinkedStack class, and we assign it
to the current field of the LinkedIterator class (which is a member of the non‐
static member class).
If we want to use explicit references, and make use of this, then we have to use a
special syntax for explicitly referring to the containing instance of the this object.
For example, if we want to be explicit in our constructor, we can use the following
syntax:
public LinkedIterator() { this.current = LinkedStack.this.head; }

The general syntax is classname.this, where classname is the name of a contain‐
ing class. Note that member classes can themselves contain member classes, nested
to any depth. However, because no member class can have the same name as any
containing class, the use of the enclosing class name prepended to this is a perfectly
general way to refer to any containing instance.

Scope versus inheritance
We notice that a top-level class can extend a member class. With the introduction
of nonstatic member classes, two separate hierarchies must be considered for any
class. The first is the inheritance hierarchy, from superclass to subclass, that defines
the fields and methods a member class inherits. The second is the containment hier‐
archy, from containing class to contained class, that defines a set of fields and meth‐
ods that are in the scope of (and are therefore accessible to) the member class.

It is important to be familiar with the properties and rules of thumb that the two
hierarchies have:
• The two hierarchies are entirely distinct from each other; it is important that
you do not confuse them.
• Refrain from creating naming conflicts, where a field or method in a superclass
has the same name as a field or method in a containing class.
• If such a naming conflict does arise, the inherited field or method takes prece‐
dence over the field or method of the same name in the containing class.
• Inherited fields and methods are in the scope of the class that inherits them
and take precedence over fields and methods by the same name in enclosing
scopes.
• To prevent confusion between the class hierarchy and the containment hierar‐
chy, avoid deep containment hierarchies.
• If a class is nested more than two levels deep, it is probably going to cause more
confusion than it is worth.
• If a class has a deep class hierarchy (i.e., it has many ancestors), consider defin‐
ing it as a top-level class rather than as a nonstatic member class.

Local Classes
A local class is declared locally within a block of Java code rather than as a member
of a class. Only classes may be defined locally: interfaces, enumerated types, and
annotation types must be top-level or static member types. Typically, a local class is
defined within a method, but it can also be defined within a static initializer or
instance initializer of a class.
Just as all blocks of Java code appear within class definitions, all local classes are nes‐
ted within containing blocks. For this reason, local classes share many of the
features of member classes. It is usually more appropriate to think of them as an
entirely separate kind of nested type.

The defining characteristic of a local class is that it is local to a block of code. Like a
local variable, a local class is valid only within the scope defined by its enclosing
block. Example 4-3 shows how we can modify the iterator() method of the
LinkedStack class so it defines LinkedIterator as a local class instead of a member
class.

By doing this, we move the definition of the class even closer to where it is used and
hopefully improve the clarity of the code even further. For brevity, Example 4-3
shows only the iterator() method, not the entire LinkedStack class that
contains it.


Example 4-3. Defining and using a local class
// This method returns an Iterator object for this LinkedStack
public Iterator<Linkable> Iterator() {
 // Here's the definition of LinkedIterator as a local class
 class LinkedIterator implements Iterator<Linkable> {
 Linkable current;
 // The constructor uses a private field of the containing class
 public LinkedIterator() { current = head; }
 // The following 3 methods are defined by the Iterator interface
 public boolean hasNext() { return current != null; }
 public Linkable next() {
 if (current == null)
 throw new java.util.NoSuchElementException();
 Linkable value = current;
 current = current.getNext();
 return value;
 }
 public void remove() { throw new UnsupportedOperationException(); }
 }
 // Create and return an instance of the class we just defined
 return new LinkedIterator();
}

Features of local classes
Local classes have the following interesting features:
• Like member classes, local classes are associated with a containing instance and
can access any members, including private members, of the containing class.
• In addition to accessing fields defined by the containing class, local classes can
access any local variables, method parameters, or exception parameters that are
in the scope of the local method definition and are declared final.


Restrictions on local classes
Local classes are subject to the following restrictions:
• The name of a local class is defined only within the block that defines it; it can
never be used outside that block. (Note, however, that instances of a local class
created within the scope of the class can continue to exist outside of that scope.
This situation is described in more detail later in this section.)
• Local classes cannot be declared public, protected, private, or static.
• Like member classes, and for the same reasons, local classes cannot contain
static fields, methods, or classes. The only exception is for constants that are
declared both static and final.
• Interfaces, enumerated types, and annotation types cannot be defined locally.
• A local class, like a member class, cannot have the same name as any of its
enclosing classes.
• As noted earlier, a local class can use the local variables, method parameters,
and even exception parameters that are in its scope but only if those variables
or parameters are declared final. This is because the lifetime of an instance of
a local class can be much longer than the execution of the method in which the
class is defined.

NB : A local class has a private internal copy of all local variables it
uses (these copies are automatically generated by javac). The
only way to ensure that the local variable and the private copy
are always the same is to insist that the local variable is final.


Scope of a local class
In discussing nonstatic member classes, we saw that a member class can access any
members inherited from superclasses and any members defined by its containing
classes. The same is true for local classes, but local classes can also access final local
variables and parameters. Example 4-4 illustrates the different kinds of fields and
variables that may be accessible to a local class:
Example 4-4. Fields and variables available to a local class
class A { protected char a = 'a'; }
class B { protected char b = 'b'; }
public class C extends A {
 private char c = 'c'; // Private fields visible to local class
 public static char d = 'd';
 public void createLocalObject(final char e)
 {
 final char f = 'f';
 int i = 0; // i not final; not usable by local class
 class Local extends B
 {
 char g = 'g';
 public void printVars()
 {
 // All of these fields and variables are accessible to this class
 System.out.println(g); // (this.g) g is a field of this class
 System.out.println(f); // f is a final local variable
 System.out.println(e); // e is a final local parameter
 System.out.println(d); // (C.this.d) d field of containing class
 System.out.println(c); // (C.this.c) c field of containing class
 System.out.println(b); // b is inherited by this class
 System.out.println(a); // a is inherited by the containing class
 }
 }
 Local l = new Local(); // Create an instance of the local class
 l.printVars(); // and call its printVars() method.
 }
}


Lexical Scoping and Local Variables
A local variable is defined within a block of code that defines its scope, and outside
of that scope, a local variable cannot be accessed and ceases to exist. Any code
within the curly braces that define the boundaries of a block can use local variables
defined in that block.
This type of scoping, which is known as lexical scoping, just defines a section of
source code within which a variable can be used. It is common for programmers to
think of such a scope as temporal instead—that is, to think of a local variable as
existing from the time the JVM begins executing the block until the time control
exits the block. This is usually a reasonable way to think about local variables and
their scope.
The introduction of local classes confuses the picture, however. To see why, notice
that instances of a local class can have a lifetime that extends past the time that the
JVM exits the block where the local class is defined.

NB:In other words, if you create an instance of a local class, that
instance does not automatically go away when the JVM fin‐
ishes executing the block that defines the class. So, even
though the definition of the class was local, instances of that
class can escape out of the place they were defined.

This can cause effects that some developers initially find surprising. This is because
local classes can use local variables, and so they can contain copies of values from
lexical scopes that no longer exist. This can been seen in the following code:

public class Weird {
 // A static member interface used below
 public static interface IntHolder { public int getValue(); }
 public static void main(String[] args) {
 IntHolder[] holders = new IntHolder[10];
 for(int i = 0; i < 10; i++) {
 final int fi = i;
 // A local class
 class MyIntHolder implements IntHolder {
 // Use the final variable
 public int getValue() { return fi; }
 }
 holders[i] = new MyIntHolder();
 }
 // The local class is now out of scope, so we can't use it. But we
 // have 10 valid instances of that class in our array. The local
 // variable fi is not in our scope here, but it is still in scope
 // for the getValue() method of each of those 10 objects. So call
 // getValue() for each object and print it out. This prints the
 // digits 0 to 9.
 for(int i = 0; i < 10; i++) {
 System.out.println(holders[i].getValue());
 }
 }
}

To make sense of this code, remember that the lexical scope of the methods of a
local class has nothing to do with when the interpreter enters and exits the block of
code that defines the local class.
Each instance of a local class has an automatically created private copy of each of
the final local variables it uses, so, in effect, it has its own private copy of the scope
that existed when it was created.

NB: The local class MyIntHolder is sometimes called a closure. In
more general Java terms, a closure is an object that saves the
state of a scope and makes that scope available later.

Closures are useful in some styles of programming, and different programming lan‐
guages define and implement closures in different ways. Java implements closures as
local classes, anonymous classes, and lambda expressions.

Anonymous Classes
An anonymous class is a local class without a name. It is defined and instantiated in
a single succinct expression using the new operator. While a local class definition is a
statement in a block of Java code, an anonymous class definition is an expression,
which means that it can be included as part of a larger expression, such as a method
call.

Consider Example 4-5, which shows the LinkedIterator class implemented as an
anonymous class within the iterator() method of the LinkedStack class. Compare
it with Example 4-4, which shows the same class implemented as a local class.
Example 4-5. An enumeration implemented with an anonymous class
public Iterator<Linkable> iterator() {
 // The anonymous class is defined as part of the return statement
 return new Iterator<Linkable>() {
 Linkable current;
 // Replace constructor with an instance initializer
 { current = head; }
 // The following 3 methods are defined by the Iterator interface
 public boolean hasNext() { return current != null; }
 public Linkable next() {
 if (current == null)
 throw new java.util.NoSuchElementException();
 Linkable value = current;
 current = current.getNext();
 return value;
 }
 public void remove() { throw new UnsupportedOperationException(); }
 }; // Note the required semicolon. It terminates the return statement
}

As you can see, the syntax for defining an anonymous class and creating an instance
of that class uses the new keyword, followed by the name of a class and a class body
definition in curly braces. If the name following the new keyword is the name of a
class, the anonymous class is a subclass of the named class. If the name following
new specifies an interface, as in the two previous examples, the anonymous class
implements that interface and extends Object.

Because an anonymous class has no name, it is not possible to define a constructor
for it within the class body. This is one of the basic restrictions on anonymous
classes. Any arguments you specify between the parentheses following the super‐
class name in an anonymous class definition are implicitly passed to the superclass
constructor. Anonymous classes are commonly used to subclass simple classes that
do not take any constructor arguments, so the parentheses in the anonymous class
definition syntax are often empty. In the previous examples, each anonymous class
implemented an interface and extended Object. Because the Object() constructor
takes no arguments, the parentheses were empty in those examples.

Restrictions on anonymous classes
Because an anonymous class is just a type of local class, anonymous classes and local
classes share the same restrictions. An anonymous class cannot define any static
fields, methods, or classes, except for static final constants. Interfaces, enumer‐
ated types, and annotation types cannot be defined anonymously. Also, like local
classes, anonymous classes cannot be public, private, protected, or static.
The syntax for defining an anonymous class combines definition with instantiation.
Using an anonymous class instead of a local class is not appropriate if you need to
create more than a single instance of the class each time the containing block is
executed.
Because an anonymous class has no name, it is not possible to define a constructor
for an anonymous class. If your class requires a constructor, you must use a local
class instead. However, you can often use an instance initializer as a substitute for a
constructor.

Although they are not limited to use with anonymous classes, instance initializers
(described earlier in , were introduced
into the language for this purpose. An anonymous class cannot define a constructor,
so it only has a default constructor. By using an instance initializer, you can get
around the fact that you cannot define a constructor for an anonymous class.



How Nested Types Work

In order to make a nested type behave as if it is actually defined inside another class,
the Java compiler ends up inserting hidden fields, methods, and constructor argu‐
ments into the classes it generates. These hidden fields and methods are often
referred to as synthetic

The implementation of nested types works by having javac compile each nested
type into a separate class file, which is actually a top-level class. The compiled class
files have a special naming convention, and have names that would not ordinarily
be created from user code.

Recall our first LinkedStack example (Example 4-1), which defined a static member
interface named Linkable. When you compile this LinkedStack class, the compiler
generates two class files. The first one is LinkedStack.class, as expected.
The second class file, however, is called LinkedStack$Linkable.class. The $ in this
name is automatically inserted by javac. This second class file contains the imple‐
mentation of the static member interface defined in the exercise.

Because the nested type is compiled into an ordinary top-level class, there is no way
it can directly access the privileged members of its container. Therefore, if a static
member type uses a private (or other privileged) member of its containing type,
the compiler generates synthetic access methods (with the default package access)
and converts the expressions that access the private members into expressions that
invoke these specially generated methods.
The naming conventions for the four kinds of nested type are
(Static or nonstatic) member types
Member types are named according to the EnclosingType$Member.class
pattern.
Anonymous classes
Because anonymous classes have no names, the names of the class files that
represent them are an implementation detail. The Oracle/OpenJDK javac uses
numbers to provide anonymous class names (e.g., EnclosingType$1.class)

Local classes
A local class is named according to a combination (e.g., EnclosingType$1Mem
ber.class).

Nonstatic member class implementation
Each instance of a nonstatic member class is associated with an instance of the
enclosing class. The compiler enforces this association by defining a synthetic field
named this$0 in each member class. This field is used to hold a reference to the
enclosing instance.
Every nonstatic member class constructor is given an extra parameter that
initializes this field. Every time a member class constructor is invoked, the compiler
automatically passes a reference to the enclosing class for this extra parameter.
Local and anonymous class implementation
A local class is able to refer to fields and methods in its containing class for exactly
the same reason that a nonstatic member class can; it is passed a hidden reference to
the containing class in its constructor and saves that reference away in a private
synthetic field added by the compiler. Like nonstatic member classes, local classes
can use private fields and methods of their containing class because the compiler
inserts any required accessor methods.
What makes local classes different from member classes is that they have the ability
to refer to local variables in the scope that defines them. The crucial restriction on
this ability, however, is that local classes can reference only local variables and
parameters that are declared final. The reason for this restriction becomes appa‐
rent in the implementation.
A local class can use local variables because javac automatically gives the class a
private instance field to hold a copy of each local variable the class uses.
The compiler also adds hidden parameters to each local class constructor to initial‐
ize these automatically created private fields. A local class does not actually access
local variables but merely its own private copies of them. This could cause inconsis‐
tencies if the local variables could alter outside of the local class.
 
